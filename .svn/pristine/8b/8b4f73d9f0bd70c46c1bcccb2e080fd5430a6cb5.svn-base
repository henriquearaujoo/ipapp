package br.com.speedy.ipapp.fragment;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.ListFragment;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import org.json.JSONArray;

import java.util.ArrayList;
import java.util.List;

import br.com.speedy.ipapp.R;
import br.com.speedy.ipapp.adapter.FornecedorAdapter;
import br.com.speedy.ipapp.model.Fornecedor;
import br.com.speedy.ipapp.util.HttpConnection;

public class FornecedorFragment extends ListFragment implements Runnable {

    public static final int ATUALIZAR_LISTA = 1;

    // TODO: Rename parameter arguments, choose names that match
    // the fragment initialization parameters, e.g. ARG_ITEM_NUMBER
    private static final String ARG_PARAM1 = "param1";
    private static final String ARG_PARAM2 = "param2";

    // TODO: Rename and change types of parameters
    private String mParam1;
    private String mParam2;

    private List<Fornecedor> fornecedores;

    private View fornecedorStatus;

    private View fornecedorLista;

    private FornecedorAdapter adapter;

    private Thread threadFornecedores;

    // TODO: Rename and change types of parameters
    public static FornecedorFragment newInstance(int position) {
        FornecedorFragment fragment = new FornecedorFragment();
        Bundle args = new Bundle();
        args.putInt(ARG_PARAM1, position);
        fragment.setArguments(args);
        return fragment;
    }

    /**
     * Mandatory empty constructor for the fragment manager to instantiate the
     * fragment (e.g. upon screen orientation changes).
     */
    public FornecedorFragment() {
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_fornecedor_list, container, false);

        fornecedorLista = view.findViewById(R.id.fornecedor_lista);

        fornecedorStatus = view.findViewById(R.id.fornecedor_status);

        showProgress(true);
        threadFornecedores = new Thread(this);
        threadFornecedores.start();

        return view;
    }

    public void getPeixes(){

        callServer("get-json", "");

        Message msg = new Message();
        msg.what = ATUALIZAR_LISTA;
        handler.sendMessage(msg);
    }

    public void getFornecedoresJSON(String data){
        fornecedores = new ArrayList<Fornecedor>();

        try {
            JSONArray ja = new JSONArray(data);

            for (int i = 0; i < ja.length() ; i++) {
                Fornecedor p = new Fornecedor();
                p.setId(ja.getJSONObject(i).getLong("id"));
                p.setNome(ja.getJSONObject(i).getString("nome"));
                p.setCpf(ja.getJSONObject(i).getString("cpf"));
                p.setCnpj(ja.getJSONObject(i).getString("cnpj"));

                fornecedores.add(p);
            }

        }catch (Exception e){
            e.printStackTrace();
        }
    }

    private void callServer(final String method, final String data){

        String resposta = HttpConnection.getSetDataWeb("http://192.168.1.107:8080/ws_ipapp/webapi/myresource/getFornecedores", method, data);

        if (!resposta.isEmpty())
            getFornecedoresJSON(resposta);
    }

    @Override
    public void run() {

        getPeixes();
    }

    private void showProgress(final boolean show) {

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
            int shortAnimTime = getResources().getInteger(
                    android.R.integer.config_shortAnimTime);

            fornecedorStatus.setVisibility(View.VISIBLE);
            fornecedorStatus.animate().setDuration(shortAnimTime)
                    .alpha(show ? 1 : 0)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            fornecedorStatus.setVisibility(show ? View.VISIBLE
                                    : View.GONE);
                        }
                    });

            fornecedorLista.setVisibility(View.VISIBLE);
            fornecedorLista.animate().setDuration(shortAnimTime)
                    .alpha(show ? 0 : 1)
                    .setListener(new AnimatorListenerAdapter() {
                        @Override
                        public void onAnimationEnd(Animator animation) {
                            fornecedorLista.setVisibility(show ? View.GONE
                                    : View.VISIBLE);
                        }
                    });
        } else {
            fornecedorStatus.setVisibility(show ? View.VISIBLE : View.GONE);
            fornecedorLista.setVisibility(show ? View.GONE : View.VISIBLE);
        }
    }

    private Handler handler = new Handler(){

        @Override
        public void handleMessage(Message msg) {
            // TODO Auto-generated method stub
            switch (msg.what) {

                case ATUALIZAR_LISTA:

                    adapter = new FornecedorAdapter(getActivity(), fornecedores) ;

                    setListAdapter(adapter);

                    if (isAdded())
                        showProgress(false);

                    break;
                default:
                    break;
            }
        }
    };
}
